[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Literacy",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "narrative.html",
    "href": "narrative.html",
    "title": "1¬† Spatial Point Data",
    "section": "",
    "text": "2 Defining Projections\nProjections are a combination of the underlying elipse as well as the definition of the datum. There are literally thousands of recognized projections, each of which has to be able to be sufficiently defined such that we can convert from one recognized projection to another2.\nOne of the repositories for these projections can be found at epsg.io.\nThe EPSG Geodetic Parameter Dataset (also known as the EPGS3 registry) is a publc registry of datums, spatial reference systems, and earth elipsoids. Each item is assigned a specific EPSG code\nThe precise definitions of projections come in several different formats, some of which include:\nWell Known Text (WKT)\nPROJ.4\nIf you work with ESRI software, when you have a projected shapefile, one of the several files that go with that shapefile is the .prj file which will contain the ESRI WKT below.\nTo start off, we will load in some data from the bark beetle, Araptus attenuatus, a Sonoran Desert endemic parasite that lives within the plant Euphorbia lomelii.\nAs part of some work that we have done on these species, we have looked at the relationship between habitat suitability and sex ratio bias. The life history for this beetle is such that males will establish home by burrowing in the senescing tissues of the host plant. Once established, feamles are attracted via phermones.\nWe can plot these points using the normal ggplot functions (map overlays below).\nWe can also plot these locations and fill in some interpretive data using the leaflet library to create an interactive map as follows:\nMake sure to click on one of the markers and see the popup information that we added en route via that mutate and some HTML code.\nIn this case, we are using the latitude and longitude as numerical values of which the leaflet library is able to intrepret properly. However, just like we did for date-like data, we can convert these into a geographically relevant data type that knows a lot about geospatial processes rather than keeping it as a numeric value that we ‚Äúassume‚Äù will work properly. For this we will use the sf library.\nWe can go out and grab a map background to overlay these plots onto, giving more context (similiarly to how we did this above using leaflet).\nThe map_data() function is part of ggplot() and produces a data.frame object where each row is a coordinate used to draw polygons (see narrative on polygons for more information).\nIn ggplot there is a geom_polygon() function that takes these series of coordiantes and draws them properly over which we can lay down the sf object.\nHowever, notice that the boundary boxes for the data and the map are vastly different (the underlying map is much bigger).\nSo if we plot it as is, we have points only in a small area of the plot.\nIn a normal ggplot() display we could use + xlim() + ylim() but since we are combining both geom_polygon and geom_sf, we are required to do this in the coord_sf() function to make it work correctly5."
  },
  {
    "objectID": "narrative.html#learning-objectives",
    "href": "narrative.html#learning-objectives",
    "title": "1¬† Spatial Point Data",
    "section": "1.1 Learning Objectives",
    "text": "1.1 Learning Objectives\nThis topics is the first\n\nDescribe the importance of Ellipsoids & Datum in spatial data.\nUse both sf & ggplot in visualizing point data.\nBe able to transform point data from one projection to another."
  },
  {
    "objectID": "narrative.html#ellipsoids",
    "href": "narrative.html#ellipsoids",
    "title": "1¬† Spatial Point Data",
    "section": "1.2 Ellipsoids",
    "text": "1.2 Ellipsoids\nUnless you are in PHYS 101, the earth is not a perfect sphere (üòâ). It is an irregularly shaped object that we need to be able to characterize if we are going to develop a system of placing points onto it and doing things such as measuring distance, finding watersheds, or defining boundaries.\nThere has been a long history of ellipsoid research, all of which has been sought to increase our ability to map and move across the earth. The following table gives some historical and contemporary ellipsoids.\n\n\n\n\n\n\n\n\n\nEllipsoid\nEquatorial Radius (m)\nPolar Radius (m)\nUsed\n\n\n\n\nMaupertuis (1738)\n6,397,300\n6,363,806.283\nFrance\n\n\nPlessis (1817)\n6,376,523.0\n6,355,862.9333\nFrance\n\n\nEverest (1830)\n6,377,299.365\n6,356,098.359\nIndia\n\n\nEverest 1830 Modified (1967)\n6,377,304.063\n6,356,103.0390\nWest Malaysia & Singapore\n\n\nEverest 1830 (1967 Definition)\n6,377,298.556\n6,356,097.550\nBrunei & East Malaysia\n\n\nAiry (1830)\n6,377,563.396\n6,356,256.909\nBritain\n\n\nBessel (1841)\n6,377,397.155\n6,356,078.963\nEurope, Japan\n\n\nClarke (1866)\n6,378,206.4\n6,356,583.8\nNorth America\n\n\nClarke (1878)\n6,378,190\n6,356,456\nNorth America\n\n\nClarke (1880)\n6,378,249.145\n6,356,514.870\nFrance, Africa\n\n\nHelmert (1906)\n6,378,200\n6,356,818.17\nEgypt\n\n\nHayford (1910)\n6,378,388\n6,356,911.946\nUSA\n\n\nInternational (1924)\n6,378,388\n6,356,911.946\nEurope\n\n\nKrassovsky (1940)\n6,378,245\n6,356,863.019\nUSSR, Russia, Romania\n\n\nWGS66 (1966)\n6,378,145\n6,356,759.769\nUSA/DoD\n\n\nAustralian National (1966)\n6,378,160\n6,356,774.719\nAustralia\n\n\nNew International (1967)\n6,378,157.5\n6,356,772.2\n\n\n\nGRS-67 (1967)\n6,378,160\n6,356,774.516\n\n\n\nSouth American (1969)\n6,378,160\n6,356,774.719\nSouth America\n\n\nWGS-72 (1972)\n6,378,135\n6,356,750.52\nUSA/DoD\n\n\nGRS-80 (1979)\n6,378,137\n6,356,752.3141\nGlobal ITRS\n\n\nWGS-84 (1984)\n6,378,137\n6,356,752.3142\nGlobal GPS\n\n\nIERS (1989)\n6,378,136\n6,356,751.302\n\n\n\nIERS (2003)\n6,378,136.6\n6,356,751.9\n\n\n\n\nThe most common ones you will probably run across include GRS80/NAD83 (derived from satellite measurements of the distance of the surface to the core of the planet ) and WGS-84 (an ellipsoid based upon GPS).\n\n1.2.1 Example Data\nTo examine the differences between ellipsoids, let‚Äôs load in some data first. Here are some point data that can be interpreted as polygons and represent the lower 48 states of the US.\n\nstates <- map_data(\"state\")\nhead( states )\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      <NA>\n2 -87.48493 30.37249     1     2 alabama      <NA>\n3 -87.52503 30.37249     1     3 alabama      <NA>\n4 -87.53076 30.33239     1     4 alabama      <NA>\n5 -87.57087 30.32665     1     5 alabama      <NA>\n6 -87.58806 30.32665     1     6 alabama      <NA>\n\n\nEach row is a point that is associated with a group (in this case the state) and is plot in a specific order (to make the outline of the state). There are 15,537 points required to make the plot, with the following 49 regions.\n\nunique( states$region )\n\n [1] \"alabama\"              \"arizona\"              \"arkansas\"            \n [4] \"california\"           \"colorado\"             \"connecticut\"         \n [7] \"delaware\"             \"district of columbia\" \"florida\"             \n[10] \"georgia\"              \"idaho\"                \"illinois\"            \n[13] \"indiana\"              \"iowa\"                 \"kansas\"              \n[16] \"kentucky\"             \"louisiana\"            \"maine\"               \n[19] \"maryland\"             \"massachusetts\"        \"michigan\"            \n[22] \"minnesota\"            \"mississippi\"          \"missouri\"            \n[25] \"montana\"              \"nebraska\"             \"nevada\"              \n[28] \"new hampshire\"        \"new jersey\"           \"new mexico\"          \n[31] \"new york\"             \"north carolina\"       \"north dakota\"        \n[34] \"ohio\"                 \"oklahoma\"             \"oregon\"              \n[37] \"pennsylvania\"         \"rhode island\"         \"south carolina\"      \n[40] \"south dakota\"         \"tennessee\"            \"texas\"               \n[43] \"utah\"                 \"vermont\"              \"virginia\"            \n[46] \"washington\"           \"west virginia\"        \"wisconsin\"           \n[49] \"wyoming\"             \n\n\nFortunately for us, our old friend ggplot has a bit of magic that can do this kind of plotting for us.\n\nlibrary( ggplot2 )\nggplot( states, aes( x = long, \n                     y = lat,\n                     group = group ) ) + \n  geom_polygon( fill = \"lightgray\", \n                color = \"black\", \n                lwd = 0.25) + \n  theme_void() -> p\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n‚Ñπ Please use `linewidth` instead.\n\n\n\n\n1.2.2 Azimuth Projections\nAn Azimuth Projection is one that is formed by a 2-dimensional plane that is tangential to the surface of the earth at example one point. This point may be polar (north or south pole) or oblique (e.g., over Richmond, Virginia).\n\n\n\n\nAzequidistant\n\n\n\nWe can apply different ellipsoids to the map when we plot it by adjusting the coordinate space it is plot within using the coord_map() modification. For a whole list of available projections, see ?mapproject.\n\np + coord_map( \"azequalarea\")\n\n\n\n\n\n\n1.2.3 Cylindrical Projection\nA cylindrical projection is one where a cylinder is wrapped around the earth creating straight lines for all parallel away from the equator.\n\n\n\n\nCylindrical Projection\n\n\n\n\np + coord_map(\"cylindrical\")\n\n\n\n\n\n\n1.2.4 Conic Projections\nConic projections are symmetric around the prime meridian and all parallels are segments of conecntric circles.\n\n\n\n\nConic Projection\n\n\n\n\np + coord_map( \"conic\", lat0 = 30)"
  },
  {
    "objectID": "narrative.html#datum",
    "href": "narrative.html#datum",
    "title": "1¬† Spatial Point Data",
    "section": "1.3 Datum",
    "text": "1.3 Datum\nOnce we have an ellipsoid model to work with we must define a DATUM type that will represent the coordiante system used. Two common DATUM types include:\n\nLongitude & Latitude - The East/West & North/South position on the surface of the earth.\n\nPrime Meridian (0¬∞ Longitude) passes thorugh the Royal Observatory in Greenwich England, with positive values of longitude to the east and negative to the west.\nEquator (0¬∞ Latitude) and is defined as the point on the planet where both northern and southern hemisphers have equal amounts of day and night at the equinox (Sept.¬†21 & March 21).\nRichmond, Virginia: 37.533333 Latitude, -77.466667 Longitude\n\nUniversal Trans Mercator - A division of the earth into 60 zones (~6¬∞longitude each, labeled 01 - 60) and 20 bands each of which is ~8¬∞ latitude (labeled C-X excluding I & O with A & B dividing up Antartica). See image here.\n\nCoordinates include Zone & band designation as well as coordinates in Easting and Northing (planar coordinates within the zone) measured in meters.\nRichmond, Virginia: 18S 282051 4156899\n\n\n\n\n\n\n\n‚ö†Ô∏è\n\n\n¬†\n\n\nYou must set both the ellipsoid and datum to be EXACTLY THE SAME for all of your data before you can do any work with it. If they are not on the same lumpy bumpy planet or in the same coordinate system, you will be screwed (that is a technical term)."
  },
  {
    "objectID": "narrative.html#sf-objects",
    "href": "narrative.html#sf-objects",
    "title": "1¬† Spatial Point Data",
    "section": "3.1 sf Objects",
    "text": "3.1 sf Objects\nSimple Features (hereafter abbreviated as sf) are an open standard developed by the Open Geospatial Consortium (OGC). They define the following basic types:\n\nPOINT\n\nLINESTRING\nPOLYGON\n\nMULTIPOINT\nMULTILINESTRING\nMULTIPOLYGON\nGEOMETRYCOLLECTION\n\nEach of these basic types can be represented within a single column of a data.frame. To do this, we need to tell the conversion function st_as_sf() which columns to consider as the datum and which ellipsoid to use.\n\nlibrary( sf )\ndata %>%\n  st_as_sf( coords=c(\"Longitude\",\"Latitude\"),\n            crs = 4326 ) -> data\nhead( data )\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -110.951 ymin: 23.2855 xmax: -109.8507 ymax: 24.21441\nGeodetic CRS:  WGS 84\n# A tibble: 6 √ó 8\n  Site  Males Females Suitab‚Ä¶¬π MFRatio GenVa‚Ä¶¬≤ GenVa‚Ä¶¬≥             geometry\n  <chr> <dbl>   <dbl>    <dbl>   <dbl>   <dbl>   <dbl>          <POINT [¬∞]>\n1 Aqu      12       9    0.722   1.33    0.120  0.0968  (-110.1043 23.2855)\n2 73       11       5    0.146   2.2     0.137  0.253  (-109.8507 24.00789)\n3 157      26      30    0.881   0.867   0.150  0.191    (-110.096 24.0195)\n4 153      35      41    0.732   0.854   0.333  0.276  (-110.4624 24.13389)\n5 163      21      21    0.433   1       0.298  0.338    (-110.951 24.2115)\n6 48       18      27    0.620   0.667   0.115  0.213  (-110.2725 24.21441)\n# ‚Ä¶ with abbreviated variable names ¬π‚ÄãSuitability, ¬≤‚ÄãGenVarArapat, ¬≥‚ÄãGenVarEuphli\n\n\nThis conversion to an sf object adds attributes to the data.frame and tibble object.\n\nclass( data )\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nThis additional sf attributes gives it more qualities such as a bounding box (e.g., the area within which all the poitns exist)\n\nst_bbox( data )\n\n      xmin       ymin       xmax       ymax \n-114.29353   23.28550 -109.32700   29.32541 \n\n\nDistances between objects.\n\nst_distance( data[1,], data[2,])\n\nUnits: [m]\n        [,1]\n[1,] 84376.8\n\n\nAs well as complex geospatial operations such as finding the convex hull (the minimal area containing all poitns).\n\ndata %>%\n  st_union() %>%\n  st_convex_hull() -> hull\nhull\n\nGeometry set for 1 feature \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -114.2935 ymin: 23.2855 xmax: -109.327 ymax: 29.32541\nGeodetic CRS:  WGS 84\n\n\nPOLYGON ((-110.1043 23.2855, -110.951 24.2115, ...\n\n\nthe center of the all the points.\n\nhull %>%\n  st_centroid()\n\nGeometry set for 1 feature \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -111.3417 ymin: 26.37741 xmax: -111.3417 ymax: 26.37741\nGeodetic CRS:  WGS 84\n\n\nPOINT (-111.3417 26.37741)\n\n\nand the area enclosed by all the points (for various units).\n\nlibrary( units )\n\nudunits database from /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/units/share/udunits/udunits2.xml\n\nhull %>%\n  st_area() %>%\n  set_units( km^2 )\n\n122130.5 [km^2]\n\n\n\n3.1.1 Reprojecting\nIn addition to the operations above, properly created sf objects can easily be projected from one CRS into another (epsg 6372 is a common projection covering Mexico based upon the GRS80 elipsoid and the latest ITRF2008 datum standard based on the meter)4.\n\ndata %>%\n  st_transform( 6372 ) %>%\n  st_bbox()\n\n   xmin    ymin    xmax    ymax \n1307745 1274010 1773676 1968473 \n\n\nAgain, do this first to all your data to make sure it is put into a proper projection (and most of your headaches will disappear).\n\n\n3.1.2 Plotting sf Objects\nAnalogous to the duality between built-in R plotting and ggplot approaches, we can use either of these frameworks to plot sf objects.\nAs built-in objects, a sf data set that has a geometry coordinate is intrinsically linked to all the other data columns. If we plot the entire data frame, we see that for each non-geometry data column, we create an individual plot.\n\nplot( data )\n\n\n\n\nThe data with the data.frame can be accessed as normal.\n\nplot( data$Suitability )\n\n\n\n\nBut if we plot it using the square brackets and names of dat columns, we can link the geometry column to it and plot it as a spatial representation of those data (and adorn it with the normal plot() upgrades accordingly).\n\nplot( data[\"Suitability\"], pch=16, cex=2)\n\n\n\n\nPerhaps not surprisingly, ggplot() also works the same way, however, the geospatial coordiantes for the plot aare taken care of using geom_sf() and you are left with definining which of the data columns you want to put into the plot as a component of the aes() definition.\n\nggplot( data, aes(color=Suitability) ) + \n  geom_sf( )\n\n\n\n\nIt works the same ways for lables.\n\nggplot( data ) + \n  geom_sf_text( aes(label=Site) ) + \n  theme_void() + \n  coord_map()\n\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data"
  },
  {
    "objectID": "narrative 2.html#raw-data",
    "href": "narrative 2.html#raw-data",
    "title": "2¬† Working with Shapefiles",
    "section": "2.1 Raw Data",
    "text": "2.1 Raw Data\nThe data for this are going to be represented by roads and development zones in Richmond, Virginia. These data are made available by the GIS Department of the City of Richmond. For this example, we will be loading these in as shapefiles.\nYou can load in shapefile data directly into R but we have to do a little work. First, we should understand that a shapefile is not an actual file, it is a collection of several files. They are often zipped up into a single archive.\nHere are two shape file archives that I have up on Github in the class repository.\n\nroads_url <- \"https://github.com/dyerlab/ENVS-Lectures/raw/master/data/Centerlines-shp.zip\"\ndistrict_url <- \"https://github.com/dyerlab/ENVS-Lectures/raw/master/data/Zoning_Districts-shp.zip\"\n\nWe can use R to download and unzip the file in the current data directory (n.b., you can do it using a browser as well). To use R you need to first download them (I‚Äôve set eval=FALSE to the chuck so it is not redownloaded each time. Run it by hand using CTRL/CMD + Return).\n\ndownload.file( district_url , destfile = \"./Districts.zip\")\ndownload.file( roads_url, destfile =  \"./Roads.zip\")\n\nWe can unzip them now as:\n\nunzip(\"Districts.zip\")\nunzip(\"Roads.zip\")\n\nThese routines will expand the archives in the current directory.\nDepending upon how the archives were created, they may make a sub directory or just a pile of files in the same directory. For this example, the are one of each with the Zoning_Districts. set of files expanded in the current directory and the Roads expanded to a subfolder named Centerlines-shp.\n\nsystem( \"ls\" )"
  },
  {
    "objectID": "narrative 2.html#lines",
    "href": "narrative 2.html#lines",
    "title": "2¬† Working with Shapefiles",
    "section": "2.2 Lines",
    "text": "2.2 Lines\nWe‚Äôve covered points and now if we put them together in a sequence, we get lines. They are taken in the order given, just like when we were plotting polygons using geom_polygon(). Instead of loading these in manually, I‚Äôm going to load in the shapefile with the roads. To load in shapefiles, we use the st_read() function and pass it the .shp file.\n\nroads <- st_read( \"Centerlines-shp/tran_Carriageway.shp\" ) \n\nReading layer `tran_Carriageway' from data source \n  `/Users/brycenboettcher/Documents/Data-Literacy-Narrative-Collection/Centerlines-shp/tran_Carriageway.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 29081 features and 25 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 11734060 ymin: 3682790 xmax: 11817490 ymax: 3751927\nProjected CRS: NAD83 / Virginia South (ftUS)\n\nnames( roads )\n\n [1] \"FID\"        \"Carriagewa\" \"AssetID\"    \"StreetType\" \"Functional\"\n [6] \"FIPS\"       \"LeftFromAd\" \"LeftToAddr\" \"RightFromA\" \"RightToAdd\"\n[11] \"PrefixDire\" \"ProperName\" \"SuffixType\" \"SuffixDire\" \"FullName\"  \n[16] \"RouteName\"  \"OneWay\"     \"PostedSpee\" \"CADRouteSp\" \"CreatedBy\" \n[21] \"CreatedDat\" \"EditBy\"     \"EditDate\"   \"GlobalID\"   \"SHAPE_Leng\"\n[26] \"geometry\"  \n\n\nWe can clean it up a bit by removing the extraneous columns.\n\nroads %>%\n  select(-CreatedBy,\n         -CreatedDat,\n         -EditBy,\n         -EditDate) %>%\n  select( FIPS, AssetID, StreetType, Functional, FullName, OneWay, geometry ) -> roads\nroads\n\nSimple feature collection with 29081 features and 6 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 11734060 ymin: 3682790 xmax: 11817490 ymax: 3751927\nProjected CRS: NAD83 / Virginia South (ftUS)\nFirst 10 features:\n   FIPS AssetID StreetType Functional      FullName OneWay\n1   760       2  Secondary      Local     Sauer Ave   <NA>\n2   760       3  Secondary      Local     Sauer Ave   <NA>\n3   760      89  Secondary      Local   Amherst Ave   <NA>\n4   760      91  Secondary      Local     Corbin St   <NA>\n5   760      92  Secondary      Local    Piney Road   <NA>\n6   760      93  Secondary      Local     Corbin St   <NA>\n7   760      94  Secondary      Local Old Brook Cir   <NA>\n8   760      99  Secondary  Collector  Fauquier Ave     FT\n9   760     104  Secondary      Local  Nottoway Ave   <NA>\n10  760     107  Secondary      Local     Corbin St   <NA>\n                         geometry\n1  LINESTRING (11775968 373330...\n2  LINESTRING (11775997 373334...\n3  LINESTRING (11785407 374003...\n4  LINESTRING (11789753 374015...\n5  LINESTRING (11788684 373991...\n6  LINESTRING (11789640 373986...\n7  LINESTRING (11787930 373982...\n8  LINESTRING (11785621 373921...\n9  LINESTRING (11784473 373936...\n10 LINESTRING (11789514 373955...\n\n\nYou can see that the geometry object is a LINESTRING (in sf terms). We can see the coordinates for one of these (say Dwyer St), by conveting the geometry object to a Well Know Text (WKT) version representing the sequence of points.\nFor any particular street, say Three Chopt Road in Richmond, we can filter out the rows of this for each LINESTRING object.\n\nroads %>% \n  filter( FullName == \"Three Chopt Road\") -> three_chopt\nthree_chopt\n\nSimple feature collection with 65 features and 6 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 11755430 ymin: 3732239 xmax: 11766160 ymax: 3744563\nProjected CRS: NAD83 / Virginia South (ftUS)\nFirst 10 features:\n   FIPS AssetID StreetType     Functional         FullName OneWay\n1   760    8868     Artery Minor Arterial Three Chopt Road     FT\n2   760    8870     Artery Minor Arterial Three Chopt Road     FT\n3   760   10053     Artery Minor Arterial Three Chopt Road     TF\n4   760   10054     Artery Minor Arterial Three Chopt Road     TF\n5   760   10055     Artery Minor Arterial Three Chopt Road     FT\n6   760   10056     Artery Minor Arterial Three Chopt Road     FT\n7   760   10057     Artery Minor Arterial Three Chopt Road   <NA>\n8   760   10058     Artery Minor Arterial Three Chopt Road   <NA>\n9   760   12433     Artery Minor Arterial Three Chopt Road   <NA>\n10  760   12440     Artery Minor Arterial Three Chopt Road   <NA>\n                         geometry\n1  LINESTRING (11763416 373910...\n2  LINESTRING (11763405 373865...\n3  LINESTRING (11763466 374021...\n4  LINESTRING (11763452 374026...\n5  LINESTRING (11763466 374021...\n6  LINESTRING (11763483 374024...\n7  LINESTRING (11763460 373995...\n8  LINESTRING (11763449 373956...\n9  LINESTRING (11765211 373462...\n10 LINESTRING (11765747 373355...\n\n\nThis one has 65 elements, each of which is created by a sequence of points. We can loop through them and print out the coordinates in textual format as:\n\nfor( i in 1:nrow(three_chopt) ) {\n  geo <- three_chopt$geometry[i]\n  cat( i, st_as_text( geo ), \"\\n\") \n}\n\n1 LINESTRING (11763416 3739109, 11763452 3739376) \n2 LINESTRING (11763405 3738655, 11763403 3738666, 11763398 3738687, 11763386 3738761, 11763382 3738807, 11763383 3738849, 11763385 3738879, 11763392 3738922, 11763395 3738955, 11763414 3739084, 11763416 3739109) \n3 LINESTRING (11763466 3740210, 11763459 3740241, 11763452 3740269) \n4 LINESTRING (11763452 3740269, 11763455 3740306, 11763478 3740532) \n5 LINESTRING (11763466 3740210, 11763475 3740227, 11763483 3740243) \n6 LINESTRING (11763483 3740243, 11763487 3740298, 11763508 3740495) \n7 LINESTRING (11763460 3739957, 11763460 3739970, 11763462 3740051, 11763464 3740132, 11763466 3740210) \n8 LINESTRING (11763449 3739565, 11763451 3739646, 11763454 3739727, 11763456 3739813, 11763458 3739889, 11763460 3739957) \n9 LINESTRING (11765211 3734622, 11765195 3734652, 11765182 3734682, 11765169 3734713, 11765159 3734744, 11765145 3734793, 11765133 3734842, 11765123 3734892, 11765114 3734955, 11765103 3735018, 11765102 3735024, 11765096 3735051, 11765089 3735077, 11765079 3735102) \n10 LINESTRING (11765747 3733557, 11765743 3733573) \n11 LINESTRING (11765743 3733573, 11765625 3734022, 11765619 3734041, 11765612 3734061, 11765603 3734079) \n12 LINESTRING (11765603 3734079, 11765596 3734095, 11765587 3734109) \n13 LINESTRING (11765785 3733407, 11765751 3733540) \n14 LINESTRING (11765751 3733540, 11765747 3733557) \n15 LINESTRING (11765079 3735102, 11765079 3735131, 11765078 3735159, 11765075 3735187, 11765051 3735355) \n16 LINESTRING (11765587 3734109, 11765578 3734122, 11765569 3734135, 11765471 3734266, 11765356 3734419, 11765251 3734560) \n17 LINESTRING (11765251 3734560, 11765230 3734591, 11765211 3734622) \n18 LINESTRING (11763934 3736816, 11763898 3736854, 11763863 3736893, 11763829 3736934, 11763798 3736975, 11763768 3737018, 11763746 3737052, 11763726 3737087, 11763707 3737124) \n19 LINESTRING (11763707 3737124, 11763690 3737162, 11763674 3737202, 11763661 3737242) \n20 LINESTRING (11766160 3732239, 11766154 3732261, 11766146 3732281, 11766137 3732301, 11766125 3732320, 11766111 3732338) \n21 LINESTRING (11766111 3732338, 11766093 3732359, 11766077 3732381, 11766063 3732405, 11766051 3732429, 11766040 3732454, 11765967 3732710, 11765954 3732756) \n22 LINESTRING (11765954 3732756, 11765900 3732959) \n23 LINESTRING (11765900 3732959, 11765785 3733407) \n24 LINESTRING (11763442 3738419, 11763392 3738656) \n25 LINESTRING (11763661 3737242, 11763641 3737323, 11763560 3737754, 11763499 3738117, 11763442 3738419) \n26 LINESTRING (11765051 3735355, 11765040 3735477, 11765027 3735603, 11765006 3735720) \n27 LINESTRING (11765006 3735720, 11764995 3735768, 11764982 3735815, 11764967 3735862, 11764950 3735908, 11764932 3735953, 11764911 3735997, 11764882 3736048, 11764852 3736098, 11764826 3736138, 11764798 3736178, 11764769 3736216, 11764739 3736254) \n28 LINESTRING (11764137 3736666, 11764136 3736666, 11764093 3736693, 11764051 3736721, 11764011 3736751, 11763972 3736783, 11763934 3736816) \n29 LINESTRING (11764739 3736254, 11764665 3736336, 11764642 3736363, 11764617 3736388, 11764591 3736412, 11764564 3736434, 11764540 3736451, 11764516 3736467, 11764490 3736482, 11764464 3736495, 11764457 3736499, 11764390 3736532, 11764273 3736592, 11764227 3736615, 11764182 3736639, 11764137 3736666) \n30 LINESTRING (11765310 3734586, 11765295 3734599, 11765282 3734614, 11765268 3734634, 11765254 3734654, 11765242 3734675, 11765232 3734696, 11765219 3734727, 11765208 3734758, 11765199 3734789, 11765190 3734821, 11765177 3734889, 11765162 3734957, 11765160 3734976, 11765156 3734993, 11765150 3735011, 11765142 3735028, 11765133 3735043, 11765121 3735060, 11765108 3735075, 11765094 3735089, 11765079 3735102) \n31 LINESTRING (11765857 3733581, 11765848 3733588, 11765847 3733588, 11765836 3733599, 11765825 3733611, 11765817 3733624, 11765809 3733637, 11765804 3733652, 11765749 3733864, 11765694 3734088, 11765689 3734103, 11765683 3734118, 11765675 3734132) \n32 LINESTRING (11765675 3734132, 11765636 3734183, 11765359 3734547, 11765344 3734561, 11765327 3734574, 11765310 3734586) \n33 LINESTRING (11759671 3743060, 11759743 3743022, 11759962 3742885) \n34 LINESTRING (11759962 3742885, 11760198 3742743, 11760303 3742691, 11760432 3742645, 11760506 3742626, 11760570 3742617) \n35 LINESTRING (11760570 3742617, 11760922 3742570) \n36 LINESTRING (11760922 3742570, 11761128 3742538, 11761301 3742505) \n37 LINESTRING (11761301 3742505, 11761737 3742422) \n38 LINESTRING (11761737 3742422, 11761973 3742378, 11762064 3742355, 11762163 3742318, 11762234 3742279) \n39 LINESTRING (11762234 3742279, 11762345 3742202, 11762581 3742010) \n40 LINESTRING (11762581 3742010, 11762798 3741834) \n41 LINESTRING (11756794 3744048, 11757219 3743916, 11757442 3743857, 11757585 3743811) \n42 LINESTRING (11757585 3743811, 11757919 3743694) \n43 LINESTRING (11757919 3743694, 11758226 3743587) \n44 LINESTRING (11758226 3743587, 11758589 3743460) \n45 LINESTRING (11758589 3743460, 11758970 3743326) \n46 LINESTRING (11759295 3743234, 11759313 3743227) \n47 LINESTRING (11759313 3743227, 11759332 3743220) \n48 LINESTRING (11759332 3743220, 11759478 3743169, 11759644 3743095, 11759671 3743060) \n49 LINESTRING (11759280 3743196, 11759299 3743190) \n50 LINESTRING (11759299 3743190, 11759300 3743190, 11759318 3743183) \n51 LINESTRING (11759318 3743183, 11759463 3743132, 11759631 3743056, 11759671 3743060) \n52 LINESTRING (11755429 3744542, 11755434 3744537, 11755501 3744480, 11755502 3744479, 11755574 3744429, 11755576 3744428, 11755652 3744386, 11755654 3744385, 11755734 3744350, 11755736 3744349, 11756446 3744138, 11756739 3744045, 11756794 3744048) \n53 LINESTRING (11755466 3744563, 11755526 3744511, 11755596 3744463, 11755671 3744421, 11755749 3744387, 11756458 3744176, 11756458 3744176, 11756750 3744084, 11756794 3744048) \n54 LINESTRING (11762798 3741834, 11763253 3741478, 11763350 3741382) \n55 LINESTRING (11763350 3741382, 11763364 3741367) \n56 LINESTRING (11758970 3743326, 11759023 3743329, 11759295 3743234) \n57 LINESTRING (11758970 3743326, 11759009 3743291, 11759280 3743196) \n58 LINESTRING (11763508 3740495, 11763505 3740642) \n59 LINESTRING (11763505 3740642, 11763509 3740676, 11763510 3740774, 11763500 3740870, 11763471 3741028) \n60 LINESTRING (11763478 3740532, 11763505 3740642) \n61 LINESTRING (11763441 3739375, 11763446 3739407, 11763449 3739565) \n62 LINESTRING (11763393 3739110, 11763413 3739268, 11763413 3739284, 11763428 3739375) \n63 LINESTRING (11763383 3738657, 11763380 3738666, 11763373 3738704, 11763362 3738777, 11763358 3738817, 11763359 3738854, 11763361 3738885, 11763365 3738920, 11763393 3739110) \n64 LINESTRING (11763471 3741028, 11763438 3741210, 11763427 3741246, 11763398 3741312, 11763376 3741348) \n65 LINESTRING (11763376 3741348, 11763364 3741367) \n\n\nWe can then plot this using the built-in plot commands as:\n\nplot( three_chopt[\"StreetType\"] )\n\n\n\n\nOr using ggplot as:\n\nggplot( three_chopt ) + \n  geom_sf() + \n  coord_sf()"
  },
  {
    "objectID": "narrative 2.html#polygons",
    "href": "narrative 2.html#polygons",
    "title": "2¬† Working with Shapefiles",
    "section": "2.3 Polygons",
    "text": "2.3 Polygons\nPolygons are simply lines whose first and last point are the same (e.g., they close upon themselves). We can create these de novo\n\n2.3.1 Polygons from Data Frames\nAs a first approximation, we can grab polygon data from ggplot itself. Here I pull in the data.frame representing the counties of Virginia.\n\nlibrary( maps )\n\n\nAttaching package: 'maps'\n\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nmap_data( \"county\", \"virginia\") %>%\n  select( Longitude = long,\n          Latitude = lat,\n          group,\n          County = subregion) -> va_counties\nhead( va_counties )\n\n  Longitude Latitude group   County\n1 -75.27519 38.03867     1 accomack\n2 -75.21790 38.02721     1 accomack\n3 -75.21790 38.02721     1 accomack\n4 -75.24655 37.99283     1 accomack\n5 -75.30384 37.94127     1 accomack\n6 -75.31530 37.92981     1 accomack\n\n\nTo get an idea of what theses data represent visually, let‚Äôs first plot it as a geom_point() object. This wil show you where all the coordinates are located (just not the connecting lines).\n\nggplot( va_counties, aes( Longitude, Latitude) ) + \n  geom_point( size=0.25 ) + \n  coord_quickmap()\n\n\n\n\n\nggplot( va_counties, aes( Longitude, Latitude) ) + \n  geom_polygon( aes( group=group ),\n                fill=\"grey80\",\n                color = \"black\", \n                size = 0.25) + \n  coord_quickmap()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n‚Ñπ Please use `linewidth` instead.\n\n\n\n\n\nWhat is hidden here is the complexity of the the points themselves. Each county is identified by a group in the data.frame\nIf we look at a particular county, it may be a bit more informative on how these things are consturcted. Here are the points (in red) and the underlying connecting lines creating the polygon (in grey).\n\nva_counties %>%\n  filter( County %in%  c(\"hanover\",\"henrico\") ) %>%\n  ggplot( aes(Longitude, Latitude) ) + \n  geom_polygon( aes( fill = County), alpha=0.1 ) +\n  geom_point( aes( color = County) ) +\n  coord_quickmap()\n\n\n\n\nNotice that the points on the border are repeated in both County == \"hanover\" and County == \"henrico\".\n\n\n2.3.2 Polygons from Shapefiles\nWe can also load these in from shapefiles. In the Richmond GIS data, we have Zoning District data. We can unzip them in the current directory as before.\n\nunzip( \"./Districts.zip\")\n\nAnd in this case, it simply expands all the files in the current directory as a set of files named Zoning_Districts.*.\n\nsystem(\"ls -al Zoning*\")\n\nTo load it in, we read the shapefile (.shp) from the local directory.\n\ndistricts <- st_read( \"Zoning_Districts.shp\" )\n\nReading layer `Zoning_Districts' from data source \n  `/Users/brycenboettcher/Documents/Data-Literacy-Narrative-Collection/Zoning_Districts.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 634 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 11743500 ymin: 3687944 xmax: 11806060 ymax: 3744741\nProjected CRS: NAD83 / Virginia South (ftUS)\n\nclass( districts )\n\n[1] \"sf\"         \"data.frame\"\n\n\nThis has a lot of columns of information.\n\nnames( districts )\n\n [1] \"OBJECTID\"   \"Name\"       \"Ordinance\"  \"OrdinanceP\" \"Conditiona\"\n [6] \"AdoptionDa\" \"Comment\"    \"CreatedBy\"  \"CreatedDat\" \"EditBy\"    \n[11] \"EditDate\"   \"GlobalID\"   \"Shape__Are\" \"Shape__Len\" \"geometry\"  \n\n\n\nsummary( districts )\n\n    OBJECTID          Name            Ordinance          OrdinanceP       \n Min.   :   1.0   Length:634         Length:634         Length:634        \n 1st Qu.: 162.2   Class :character   Class :character   Class :character  \n Median : 324.5   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 389.6                                                           \n 3rd Qu.: 486.8                                                           \n Max.   :2677.0                                                           \n  Conditiona          AdoptionDa           Comment           CreatedBy        \n Length:634         Min.   :2000-01-01   Length:634         Length:634        \n Class :character   1st Qu.:2000-01-01   Class :character   Class :character  \n Mode  :character   Median :2000-01-01   Mode  :character   Mode  :character  \n                    Mean   :2004-01-20                                        \n                    3rd Qu.:2007-09-10                                        \n                    Max.   :2020-07-27                                        \n   CreatedDat            EditBy             EditDate         \n Min.   :2020-08-24   Length:634         Min.   :2020-08-24  \n 1st Qu.:2020-08-24   Class :character   1st Qu.:2020-08-24  \n Median :2020-08-24   Mode  :character   Median :2020-08-24  \n Mean   :2020-08-24                      Mean   :2020-08-24  \n 3rd Qu.:2020-08-24                      3rd Qu.:2020-08-24  \n Max.   :2020-08-24                      Max.   :2020-08-24  \n   GlobalID           Shape__Are          Shape__Len                geometry  \n Length:634         Min.   :     2823   Min.   :   213.4   MULTIPOLYGON :634  \n Class :character   1st Qu.:    71070   1st Qu.:  1232.3   epsg:2284    :  0  \n Mode  :character   Median :   258852   Median :  2552.3   +proj=lcc ...:  0  \n                    Mean   :  2749033   Mean   :  6265.9                      \n                    3rd Qu.:  1175317   3rd Qu.:  6166.8                      \n                    Max.   :171812574   Max.   :111874.1                      \n\n\nMore importantly, we can look at the raw data and see the other meta data.\n\nhead(districts, n=2)\n\nSimple feature collection with 2 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 11773600 ymin: 3730159 xmax: 11789510 ymax: 3731016\nProjected CRS: NAD83 / Virginia South (ftUS)\n  OBJECTID Name Ordinance OrdinanceP Conditiona AdoptionDa Comment\n1        1 RO-2      <NA>       <NA>         No 2000-01-01    <NA>\n2        2  B-2      <NA>       <NA>         No 2000-01-01    <NA>\n           CreatedBy CreatedDat             EditBy   EditDate\n1 richard.morton_cor 2020-08-24 richard.morton_cor 2020-08-24\n2 richard.morton_cor 2020-08-24 richard.morton_cor 2020-08-24\n                              GlobalID Shape__Are Shape__Len\n1 334799f0-fe38-46bf-97c2-260f5a036559   60150.29   983.6815\n2 558df9cd-4f9c-4248-a689-bc2d9c79d060   56987.01   971.8832\n                        geometry\n1 MULTIPOLYGON (((11773598 37...\n2 MULTIPOLYGON (((11789222 37...\n\n\nThe whole thing looks like this (I‚Äôll use the area of each polygon as the fill color).\n\nplot( districts[\"Shape__Are\"], axes=TRUE )\n\n\n\n\nNotice it is in CRS = NAD83/Virginia South (ftUS), which if we look at epsg.io and search for it relates to EPGS=32147. Let‚Äôs do some pre-processing1:\n- Put it in Lat/Lon for simplicity\n- Drop some of the unnecessary columns of data in the shapefile. - Crop to the VCU/Fan area (I went to google earth and found the bounding box and then just added it here so I had to make it lat/lon then crop then change it back).\n\ndistricts %>% \n  select( OBJECTID, \n          Name, \n          GlobalID, \n          Area = Shape__Are,\n          geometry) -> districts\nhead( districts )\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 11772310 ymin: 3727332 xmax: 11794670 ymax: 3731016\nProjected CRS: NAD83 / Virginia South (ftUS)\n  OBJECTID Name                             GlobalID      Area\n1        1 RO-2 334799f0-fe38-46bf-97c2-260f5a036559  60150.29\n2        2  B-2 558df9cd-4f9c-4248-a689-bc2d9c79d060  56987.01\n3        3  R-6 8d731cd3-7cfb-41d4-9545-44f1055515b3  93826.03\n4        4  B-1 f4fb1283-03ff-41e7-b5ed-3cf6e80c2e9b  17526.31\n5        5  B-1 f1305477-4e71-463c-a202-332971d8c5e1  33261.30\n6        6 RO-1 65e43734-9728-4241-921d-c657137dae0a 132773.19\n                        geometry\n1 MULTIPOLYGON (((11773598 37...\n2 MULTIPOLYGON (((11789222 37...\n3 MULTIPOLYGON (((11774598 37...\n4 MULTIPOLYGON (((11794468 37...\n5 MULTIPOLYGON (((11781126 37...\n6 MULTIPOLYGON (((11772306 37...\n\n\nAnd we can plot it normally using plot() for sf objects. Each row is a MULTIPOLYGON object.\n\ndistricts %>%\n  filter( OBJECTID == 368 ) %>%\n  st_buffer(dist = 1500) %>%\n  st_bbox() -> fan_bbox\ndistricts %>%\n  st_crop( fan_bbox ) -> theFan \n\nWarning: attribute variables are assumed to be spatially constant throughout all\ngeometries\n\nplot( theFan[\"Name\"] )\n\n\n\n\nOr as a ggplot() object (notice how it converts to lat/lon when plotting),\n\nggplot( theFan ) + \n  geom_sf( aes( fill=Name ) ) + \n  coord_sf() \n\n\n\n\nLet‚Äôs go grab a key to those zoning types. I‚Äôve uploaded a csv file with a translation. Here I left_join() with that new file that is read in dynamically2.\n\nzone_url <- \"https://raw.githubusercontent.com/dyerlab/ENVS-Lectures/master/data/DistrictCodes.csv\"\ntheFan %>%\n  left_join( read_csv( zone_url ),\n             by=\"Name\") %>%\n  mutate( Category = factor( Category) ) %>%\n  select( OBJECTID, \n          Name, \n          Category, \n          everything() )  -> theFan\n\nRows: 27 Columns: 2\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (2): Name, Category\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot( theFan ) +\n  geom_sf( aes( fill=Category)) +\n  scale_fill_brewer( type=\"qual\", \n                     palette = \"Set3\")"
  },
  {
    "objectID": "narrative 2.html#operations",
    "href": "narrative 2.html#operations",
    "title": "2¬† Working with Shapefiles",
    "section": "2.4 Operations",
    "text": "2.4 Operations\nSo we will close this out by looking at a few different operations that we can use for polygons. First, I‚Äôm going to load in the road shapefile (that was named by some random sequence of letters) and reproject it.\n\nhead( roads, n=3)\n\nSimple feature collection with 3 features and 6 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 11775970 ymin: 3733301 xmax: 11786050 ymax: 3740059\nProjected CRS: NAD83 / Virginia South (ftUS)\n  FIPS AssetID StreetType Functional    FullName OneWay\n1  760       2  Secondary      Local   Sauer Ave   <NA>\n2  760       3  Secondary      Local   Sauer Ave   <NA>\n3  760      89  Secondary      Local Amherst Ave   <NA>\n                        geometry\n1 LINESTRING (11775968 373330...\n2 LINESTRING (11775997 373334...\n3 LINESTRING (11785407 374003...\n\n\n\nplot( theFan$geometry, lwd=2 )\nfanRoads <- st_crop( roads, st_bbox( theFan ))\n\nWarning: attribute variables are assumed to be spatially constant throughout all\ngeometries\n\nplot( fanRoads$geometry, col=\"blue\", cex=0.5, add=TRUE )\n\n\n\n\nLet‚Äôs isolate one of the main polygons in theFan data set. The target one below is indicated by OBJECTID=368.\n\ntheFan %>%\n  mutate( Target = ifelse( OBJECTID == 368, \n                           TRUE, \n                           FALSE) ) -> theFan\ntheFan %>%\n  ggplot() + \n  geom_sf( aes(fill=Target) ) + \n  geom_sf_text( aes(label=OBJECTID), size=3 ) +\n  coord_sf()"
  },
  {
    "objectID": "narrative 2.html#spatial-joins",
    "href": "narrative 2.html#spatial-joins",
    "title": "2¬† Working with Shapefiles",
    "section": "2.5 Spatial Joins",
    "text": "2.5 Spatial Joins\n\nnames( theFan )\n\n[1] \"OBJECTID\" \"Name\"     \"Category\" \"GlobalID\" \"Area\"     \"geometry\" \"Target\"  \n\nnames( fanRoads )\n\n[1] \"FIPS\"       \"AssetID\"    \"StreetType\" \"Functional\" \"FullName\"  \n[6] \"OneWay\"     \"geometry\"  \n\n\nWe can use spatial joins to select features either directly. Here I‚Äôll use the target polygon in theFan\n\ntarget <- theFan[ theFan$OBJECTID == 368, ]\ntarget\n\nSimple feature collection with 1 feature and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 11780610 ymin: 3724146 xmax: 11786260 ymax: 3729483\nProjected CRS: NAD83 / Virginia South (ftUS)\n   OBJECTID Name    Category                             GlobalID     Area\n39      368  R-6 Residential d9882dad-2625-44e7-a170-3f1425450679 13040977\n                         geometry Target\n39 POLYGON ((11785188 3726513,...   TRUE\n\n\nAnd then add an attribute to the data.frame if each multipolygon intersects that polygon.\n\nfanRoads %>%\n  mutate( OnTarget = st_intersects( fanRoads,\n                                    target, \n                                    sparse = FALSE ) ) -> fanRoads\nsummary( fanRoads$OnTarget )\n\n     V1         \n Mode :logical  \n FALSE:1567     \n TRUE :553      \n\n\nWe can get the names of these road using normal dplyr routines,\n\nfanRoads %>%\n  filter( st_intersects( fanRoads,\n                         target, \n                         sparse = FALSE ) == TRUE ) %>%\n  as_data_frame() %>%\n  select( `Street Name` = FullName ) %>%\n  arrange( `Street Name`) %>%\n  unique() \n\nWarning: `as_data_frame()` was deprecated in tibble 2.0.0.\n‚Ñπ Please use `as_tibble()` instead.\n‚Ñπ The signature and semantics have changed, see `?as_tibble`.\n\n\n# A tibble: 39 √ó 1\n   `Street Name` \n   <chr>         \n 1 Allison St    \n 2 Birch St      \n 3 Boyd St       \n 4 Floyd Ave     \n 5 Grove Ave     \n 6 Hanover Ave   \n 7 Kensington Ave\n 8 Lombardy Pl   \n 9 Madumbie Lane \n10 Monument Ave  \n# ‚Ä¶ with 29 more rows\n\n\nAnd we can plot them as:\n\nfanRoads %>%\n  filter( OnTarget==TRUE ) %>%\n  ggplot() +\n  geom_sf( aes( fill = Target ), data=theFan ) +\n  geom_sf( color=\"green\" ) + \n  scale_fill_manual( values=c(\"grey90\",\"dodgerblue3\"))\n\n\n\n\nGo check out the sf cheatsheet for more geospatial joins and options."
  }
]